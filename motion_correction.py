# -*- coding: utf-8 -*-
"""Motion_Correction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dwuY2MT9fV7vM5DIAIt8ZWMUSTw_BuFu
"""

pip install nilearn

"""# ***3D NIFTI IMAGE***"""

import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt
from nilearn import plotting
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

def motion_correction_3D(input_image_path, output_image_path):
    # Load NIfTI image
    nifti_img = nib.load(input_image_path)
    img_data = nifti_img.get_fdata()

    # Calculate mean image
    mean_img = np.mean(img_data, axis=-1)

    # Motion correction by aligning each volume to the mean image
    corrected_data = np.zeros_like(img_data)
    for t in range(img_data.shape[-1]):
        # Assume translation only for simplicity
        translation = np.argmax(np.correlate(np.ravel(mean_img), np.ravel(img_data[..., t]), mode='full')) - mean_img.size
        corrected_data[..., t] = np.roll(img_data[..., t], -translation, axis=(0, 1))

    # Save motion-corrected NIfTI image
    corrected_nifti = nib.Nifti1Image(corrected_data, affine=nifti_img.affine, header=nifti_img.header)
    nib.save(corrected_nifti, output_image_path)

    return mean_img, corrected_data

# Example usage
input_image_path = '/content/drive/My Drive/Datasets/nifti/S_37_T1.nii.gz'
output_image_path = 'output_image_corrected.nii'
mean_img, corrected_data = motion_correction_3D(input_image_path, output_image_path)

# Plot the results
fig, axes = plt.subplots(1, 3, figsize=(10, 5))

# Check if mean_img is 3D or 2D
if len(mean_img.shape) == 3:
    # If 3D, plot the middle slice
    axes[0].imshow(np.rot90(mean_img[:, :, mean_img.shape[-1] // 2]), cmap='gray')
else:
    # If 2D, plot the image directly
    axes[0].imshow(mean_img, cmap='gray')

axes[0].set_title('Mean Image')

# Plot the motion-corrected image
plotting.plot_anat(nib.load(output_image_path), display_mode='ortho', cut_coords=(0, 0, 0), title='Motion Corrected Image', axes=axes[1], cmap='gray')
plotting.plot_anat(nib.load(input_image_path), display_mode='ortho', cut_coords=(0, 0, 0), title='orginal Image', axes=axes[2], cmap='gray')
plt.show()

"""# ***4D NIFTI IMAGE***"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)
import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt

def motion_correction_4D(input_image):
    # Load the NIfTI image
    nifti_img = nib.load(input_image)

    # Get the image data and header
    data = nifti_img.get_fdata()
    affine = nifti_img.affine

    # Calculate mean image to use as reference
    mean_img = np.mean(data, axis=-1)

    # Initialize variables for motion correction
    motion_corrected_data = np.zeros_like(data)

    # Flatten the mean image
    mean_img_flat = mean_img.flatten()

    # Loop through each volume in the time series
    for i in range(data.shape[-1]):
        # Flatten the volume data
        vol_data_flat = data[..., i].flatten()

        # Register each volume to the mean image (translation only)
        translation_vector = np.linalg.lstsq(mean_img_flat[:, np.newaxis], vol_data_flat, rcond=None)[0]
        motion_corrected_data[..., i] = data[..., i] - np.dot(mean_img_flat.reshape(-1, 1), translation_vector).reshape(data[..., i].shape)

    # Create a new NIfTI image with motion-corrected data
    motion_corrected_img = nib.Nifti1Image(motion_corrected_data, affine)
    data_motion_corrected_img = motion_corrected_img.get_fdata()
    mean_motion_corrected_img = np.mean(data_motion_corrected_img, axis=-1)
    print(mean_motion_corrected_img.shape)
    return nifti_img,mean_img, motion_corrected_img,mean_motion_corrected_img

# Example usage
input_image_path = '/content/drive/My Drive/Datasets/nifti/data.nii.gz'
nifti_img1,mean_img1, motion_corrected_img,mean_motion_corrected_img = motion_correction_4D(input_image_path)

import matplotlib.pyplot as plt
from nilearn.plotting import plot_anat
# Plot the first volume from the original NIfTI image
fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#plot_anat(nifti_img1.slicer[:, :, :, 0], title='Original First Volume')
#plt.show()
axes[0].imshow(np.rot90(mean_img1[:, :, mean_img1.shape[-1] // 2]),cmap = 'gray')
axes[0].set_title('Mean Image')
axes[0].axis('off')
# Plot the first volume from the motion-corrected NIfTI image
plot_anat(motion_corrected_img.slicer[:, :, :, 0], axes=axes[1],title='Motion Corrected First Volume')
plt.show()